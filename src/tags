!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABUFSIZE	audio.c	37;"	d	file:
ARC_IN_KM	qrb.c	55;"	d	file:
CW_SPEEDS	cw_utils.c	24;"	d	file:
Complain	parse_logcfg.c	/^void Complain(char *msg) {$/;"	f
DATE	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
DEST_Lat	main.c	/^double DEST_Lat = 51.;$/;"	v
DEST_Long	main.c	/^double DEST_Long = 1.;$/;"	v
DIRCLAUSE	qtcwin.c	43;"	d	file:
EXC1	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
EXC2	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
EXC3	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
EXC4	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
EXCH	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
EXC_S	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
FREQ	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
GetCWSpeed	cw_utils.c	/^unsigned int  GetCWSpeed() {$/;"	f
HISCALL	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
HideSearchPanel	searchlog.c	/^void HideSearchPanel(void)$/;"	f
InitSearchPanel	searchlog.c	/^void InitSearchPanel()$/;"	f
IsAllBand	searchlog.c	/^int IsAllBand()$/;"	f
KEYERLINE	qtcrecv.c	/^  KEYERLINE$/;"	e	enum:__anon2	file:
KEYERLINE	qtcwin.c	/^  KEYERLINE$/;"	e	enum:__anon4	file:
KeywordNotSupported	parse_logcfg.c	/^void KeywordNotSupported(char *keyword) {$/;"	f
LEN	getexchange.c	38;"	d	file:
MAXMINUTES	clusterinfo.c	40;"	d	file:
MAX_CMD_LEN	splitscreen.c	1258;"	d	file:
MAX_COMMANDS	parse_logcfg.c	61;"	d	file:
MAX_LOCATOR_PAIRS	locator2longlat.c	56;"	d	file:
MIN_LOCATOR_PAIRS	locator2longlat.c	57;"	d	file:
MODE	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
MULTS_POSSIBLE	addmult.c	30;"	d	file:
MULTS_POSSIBLE	changepars.c	32;"	d	file:
MULTS_POSSIBLE	getexchange.c	37;"	d	file:
MYCALL	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
NBANDS	qtcutil.c	28;"	d	file:
NO_ITEM	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
NR_COLS	edit_last.c	31;"	d	file:
NR_LINES	edit_last.c	30;"	d	file:
NULLCHAR	sockserv.c	70;"	d	file:
OnLowerSearchPanel	searchlog.c	/^void OnLowerSearchPanel(int x, char *str)$/;"	f
PARAMETER_NEEDED	parse_logcfg.c	141;"	d	file:
ParameterNeeded	parse_logcfg.c	/^void ParameterNeeded(char *keyword) {$/;"	f
QTCRECVBG	qtcrecv.c	/^  QTCRECVBG,$/;"	e	enum:__anon2	file:
QTCRECVBG	qtcwin.c	/^  QTCRECVBG,$/;"	e	enum:__anon4	file:
QTCRECVCURRLINE	qtcrecv.c	/^  QTCRECVCURRLINE,$/;"	e	enum:__anon2	file:
QTCRECVCURRLINE	qtcwin.c	/^  QTCRECVCURRLINE,$/;"	e	enum:__anon4	file:
QTCRECVINVLINE	qtcrecv.c	/^  QTCRECVINVLINE,$/;"	e	enum:__anon2	file:
QTCRECVINVLINE	qtcwin.c	/^  QTCRECVINVLINE,$/;"	e	enum:__anon4	file:
QTCRECVLINE	qtcrecv.c	/^  QTCRECVLINE,$/;"	e	enum:__anon2	file:
QTCRECVLINE	qtcwin.c	/^  QTCRECVLINE,$/;"	e	enum:__anon4	file:
QTCRECVWINBG	qtcrecv.c	/^  QTCRECVWINBG = 32,$/;"	e	enum:__anon2	file:
QTCRECVWINBG	qtcwin.c	/^  QTCRECVWINBG = 32,$/;"	e	enum:__anon4	file:
QTCSENDCURRLINE	qtcsend.c	/^  QTCSENDCURRLINE$/;"	e	enum:__anon3	file:
QTCSENDINVLINE	qtcsend.c	/^  QTCSENDINVLINE,$/;"	e	enum:__anon3	file:
QTCSENDLINE	qtcsend.c	/^  QTCSENDLINE,$/;"	e	enum:__anon3	file:
QTCSENDWINBG	qtcsend.c	/^  QTCSENDWINBG = 32,$/;"	e	enum:__anon3	file:
QTH_Lat	main.c	/^double QTH_Lat = 51.;$/;"	v
QTH_Long	main.c	/^double QTH_Long = -7.;$/;"	v
RADIAN	muf.c	31;"	d	file:
RADIAN	qrb.c	56;"	d	file:
RADIAN	sunup.c	23;"	d	file:
RST_R	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
RST_S	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
SOBUF	sockserv.c	69;"	d	file:
START_COL	showscore.c	32;"	d	file:
SetCWSpeed	cw_utils.c	/^void SetCWSpeed (unsigned int wpm) {$/;"	f
ShowSearchPanel	searchlog.c	/^void ShowSearchPanel(void)$/;"	f
TIME	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	e	enum:tag_t	file:
TOLERANCE	bandmap.c	42;"	d	file:
TUNE_UP	callinput.c	35;"	d	file:
TX	writecabrillo.c	/^    EXC_S, EXCH, EXC1, EXC2, EXC3, EXC4, TX };	$/;"	e	enum:tag_t	file:
VERSIONSPLIT	splitscreen.c	25;"	d	file:
WrongFormat	parse_logcfg.c	/^void WrongFormat(char *keyword) {$/;"	f
_GNU_SOURCE	writecabrillo.c	25;"	d	file:
_XOPEN_SOURCE	writecabrillo.c	24;"	d	file:
a	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
activefield	qtcwin.c	/^int activefield;$/;"	v
add_callarea	addarea.c	/^int add_callarea(void)$/;"	f
add_lpadded	writecabrillo.c	/^void add_lpadded( char *dst, char *src, int len ) {$/;"	f
add_pfx	addpfx.c	/^int add_pfx(char *pxstr)$/;"	f
add_rpadded	writecabrillo.c	/^void add_rpadded( char *dst, char *src, int len ) {$/;"	f
addcall	addcall.c	/^int addcall(void)$/;"	f
addcall2	addcall.c	/^int addcall2(void)$/;"	f
addcallarea	main.c	/^int addcallarea;$/;"	v
addcallarea_once	main.c	/^int addcallarea_once = 0;$/;"	v
addcty	main.c	/^int addcty = 0;			\/* flag for new country *\/$/;"	v
addlog	splitscreen.c	/^void addlog(char *s)$/;"	f
addmult	addmult.c	/^int addmult(void)$/;"	f
addmult2	addmult.c	/^int addmult2(void)$/;"	f
address	netkeyer.c	/^struct sockaddr_in address;$/;"	v	typeref:struct:sockaddr_in
addspot	addspot.c	/^int addspot(void)$/;"	f
addtext	splitscreen.c	/^void addtext(char *s)$/;"	f
addzone	main.c	/^int addzone = 0;		\/* flag for new zone *\/$/;"	v
afd	audio.c	/^int afd;$/;"	v
allspots	bandmap.c	/^GList *allspots = NULL;$/;"	v
announcefilter	main.c	/^int announcefilter = FILTER_ANN; \/*  filter cluster  announcements *\/$/;"	v
arrl_fd	main.c	/^int arrl_fd = 0;$/;"	v
arrldx_usa	main.c	/^int arrldx_usa = 0;$/;"	v
arrlss	main.c	/^int arrlss = 0;$/;"	v
ask	getsummary.c	/^void ask(char *buffer, char *what)$/;"	f
attop	splitscreen.c	/^int attop = 0;$/;"	v
attr	splitscreen.c	/^int attr[3];$/;"	v
auto_cq	autocq.c	/^int auto_cq(void)$/;"	f
autosend	callinput.c	/^int autosend()$/;"	f
backgrnd_str	main.c	/^char backgrnd_str[81] =$/;"	v
background_process	background_process.c	/^void *background_process(void *ptr)$/;"	f
background_thread	main.c	/^pthread_t background_thread;$/;"	v
band	main.c	/^char band[9][4] =$/;"	v
band	writecabrillo.c	/^    int band;$/;"	m	struct:qso_t	file:
band2freq	writecabrillo.c	/^float band2freq(int band) {$/;"	f
band_cols	showscore.c	/^static int band_cols[6] =$/;"	v	file:
band_score	main.c	/^int band_score[9];$/;"	v
band_yfk	searchlog.c	/^static char band_yfk[5] = "";$/;"	v	file:
bandcorner	bandmap.c	/^unsigned int bandcorner[NBANDS][3] =$/;"	v
bandfrequency	main.c	/^float bandfrequency[9] =$/;"	v
bandindex	main.c	/^int bandindex = 0;$/;"	v
bandindexarray	main.c	/^int bandindexarray[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };$/;"	v
bandinx	main.c	/^int bandinx = BANDINDEX_40;	\/* start with 40m *\/$/;"	v
bandmap	clusterinfo.c	/^char *bandmap[MAX_SPOTS];$/;"	v
bandmap_addspot	bandmap.c	/^void bandmap_addspot( char *call, unsigned int freq, char node) {$/;"	f
bandmap_age	bandmap.c	/^void bandmap_age() {$/;"	f
bandmap_lookup	bandmap.c	/^spot *bandmap_lookup(char *partialcall)$/;"	f
bandmap_next	bandmap.c	/^spot *bandmap_next(unsigned int upwards, unsigned int freq)$/;"	f
bandmap_show	bandmap.c	/^void bandmap_show() {$/;"	f
bands	addpfx.c	/^    int bands;$/;"	m	struct:__anon1	file:
bands	showscore.c	/^static int bands[NBANDS] =$/;"	v	file:
bandweight_multis	main.c	/^int bandweight_multis[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};$/;"	v
bandweight_points	main.c	/^int bandweight_points[] = {1, 1, 1, 1, 1, 1, 1, 1, 1};$/;"	v
bc_address	lancode.c	/^struct sockaddr_in bc_address[MAXNODES];$/;"	v	typeref:struct:sockaddr_in
bc_close_rc	lancode.c	/^int bc_close_rc;$/;"	v
bc_hostaddress	lancode.c	/^char bc_hostaddress[MAXNODES][16];$/;"	v
bc_hostbyname	lancode.c	/^struct hostent *bc_hostbyname[MAXNODES];$/;"	v	typeref:struct:hostent
bc_hostservice	lancode.c	/^char bc_hostservice[MAXNODES][16] =$/;"	v
bc_sendto_rc	lancode.c	/^ssize_t bc_sendto_rc;$/;"	v
bc_socket_descriptor	lancode.c	/^int bc_socket_descriptor[MAXNODES];$/;"	v
bi_normal	showscore.c	/^static int bi_normal[6] =$/;"	v	file:
bi_warc	showscore.c	/^static int bi_warc[6] =$/;"	v	file:
block_part	main.c	/^int block_part = 0; 	\/**< if 1 block the call autocompletion$/;"	v
bm_add	bandmap.c	/^void bm_add(char *s) {$/;"	f
bm_config	bandmap.c	/^bm_config_t bm_config = {$/;"	v
bm_init	bandmap.c	/^void bm_init() {$/;"	f
bm_initialized	bandmap.c	/^short	bm_initialized = 0;$/;"	v
bm_isdupe	bandmap.c	/^int bm_isdupe( char *call, int band ) {$/;"	f
bm_ismulti	bandmap.c	/^int bm_ismulti( char * call) {$/;"	f
bm_menu	bandmap.c	/^void bm_menu()$/;"	f
bm_mutex	bandmap.c	/^pthread_mutex_t bm_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
bm_show_info	bandmap.c	/^void bm_show_info() {$/;"	f
broadcast_lan	time_update.c	/^void broadcast_lan(void)$/;"	f
buf	sockserv.c	/^    char *buf;$/;"	m	struct:sockbuffer	file:
buffer	sendbuf.c	/^char buffer[81];$/;"	v
buflen	lancode.c	/^int buflen;$/;"	v
buflen	sockserv.c	/^    int buflen;$/;"	m	struct:sockbuffer	file:
bufloc	main.c	/^int bufloc = 0;$/;"	v
build_country_list	focm.c	/^static GTree *build_country_list(struct ie_list *main_ie_list) {$/;"	f	file:
cabrillo	main.c	/^char *cabrillo = NULL;		\/*< Name of the cabrillo format definition *\/$/;"	v
cabrillo_desc	writecabrillo.c	/^struct cabrillo_desc {$/;"	s	file:
calc_continent	score.c	/^int calc_continent(int zone)$/;"	f
call	main.c	/^char call[20];$/;"	v
call	writecabrillo.c	/^    char *call;$/;"	m	struct:qso_t	file:
call_update	getexchange.c	/^int call_update = 0;$/;"	v
callareas	main.c	/^int callareas[20];$/;"	v
calledit	calledit.c	/^void calledit(void)$/;"	f
callfound	main.c	/^int callfound = 0;$/;"	v
callinput	callinput.c	/^char callinput(void)$/;"	f
callmasterarray	main.c	/^char callmasterarray[MAX_CALLMASTER][14];$/;"	v
callupdate	getexchange.c	/^char callupdate[7];$/;"	v
capturing	qtcrecv.c	/^int capturing = 0;$/;"	v
capturing	qtcwin.c	/^int capturing = 0;$/;"	v
ce_cty	main.c	/^int ce_cty;$/;"	v
change_freq	changefreq.c	/^void change_freq (void) {$/;"	f
change_rst	main.c	/^int change_rst = 0;$/;"	v
changepars	changepars.c	/^int changepars(void)$/;"	f
check_qra	locator2longlat.c	/^int check_qra(char * qra) {$/;"	f
checkexchange	getexchange.c	/^int checkexchange(int x)$/;"	f
checklogfile	checklogfile.c	/^void checklogfile(void)$/;"	f
checklogfile_new	checklogfile.c	/^int checklogfile_new(char *filename)$/;"	f
checkparameters	checkparameters.c	/^int checkparameters(void)$/;"	f
checkqtclogfile_new	checkqtclogfile.c	/^int checkqtclogfile_new()$/;"	f
cl_send_inhibit	lancode.c	/^int cl_send_inhibit = 0;$/;"	v
cleanup	cleanup.c	/^int cleanup(void)$/;"	f
cleanup_telnet	splitscreen.c	/^int cleanup_telnet(void)$/;"	f
clear_display	clear_display.c	/^void clear_display(void)$/;"	f
clear_help_block	qtcrecv.c	/^int clear_help_block() {$/;"	f
clear_help_block	qtcwin.c	/^int clear_help_block() {$/;"	f
close_audio	audio.c	/^int close_audio()$/;"	f
close_s	sockserv.c	/^int close_s(int s)$/;"	f
close_tlf_rig	sendqrg.c	/^int close_tlf_rig(RIG * my_rig)$/;"	f
cluster	main.c	/^int cluster = NOCLUSTER;	\/* 0 = OFF, 1 = FOLLOW, 2  = spots  3 = all *\/$/;"	v
clusterinfo	clusterinfo.c	/^void clusterinfo(void)$/;"	f
clusterlog	main.c	/^int clusterlog = 0;		\/* clusterlog on\/off *\/$/;"	v
clusterlogin	main.c	/^char clusterlogin[80] = "";$/;"	v
cmp_call	bandmap.c	/^gint	cmp_call (spot* ldata, char *call) {$/;"	f
cmp_freq	bandmap.c	/^gint	cmp_freq(spot *a, spot *b) {$/;"	f
cmpattern	getexchange.c	/^char cmpattern[32] = "                               ";	\/\/ global$/;"	v
cntry	focm.c	/^int cntry;$/;"	v
color	splitscreen.c	/^int color[3][2];$/;"	v
column	focm.c	/^    int column;$/;"	m	struct:pos	file:
comment	main.c	/^char comment[80];$/;"	v
comment	writecabrillo.c	/^    char *comment;$/;"	m	struct:qso_t	file:
commentfield	main.c	/^int commentfield = 0;		\/* 1 if we are in comment\/excahnge input *\/$/;"	v
config_file	main.c	/^char *config_file = NULL;$/;"	v
confirmation_needed	parse_logcfg.c	/^static int confirmation_needed;$/;"	v	file:
cont	focm.c	/^int cont;$/;"	v
contest	main.c	/^int contest = 0;		\/* 0 =  General,  1  = contest *\/$/;"	v
continent	main.c	/^char continent[3] = "";$/;"	v
continent_found	score.c	/^int continent_found() {$/;"	f
continent_multiplier_list	main.c	/^char continent_multiplier_list[7][3]; \/\/ SA, NA, EU, AF, AS and OC$/;"	v
continentlist_only	main.c	/^int continentlist_only = 0;$/;"	v
continentlist_points	main.c	/^int continentlist_points = -1;$/;"	v
controllerport	main.c	/^char controllerport[80] = "\/dev\/ttyS0";$/;"	v
copy_spot	bandmap.c	/^spot *copy_spot(spot *data)$/;"	f
count_56_banders	focm.c	/^static void count_56_banders() {$/;"	f	file:
countries	main.c	/^int countries[MAX_DATALINES];	\/* per country bit fieldwith worked bands set *\/$/;"	v
country_found	score.c	/^int country_found(char prefix[])$/;"	f
country_mult	main.c	/^int country_mult = 0;$/;"	v
countrylist_only	main.c	/^int countrylist_only = 0;$/;"	v
countrylist_points	main.c	/^int countrylist_points = -1;$/;"	v
countrynr	main.c	/^int countrynr;$/;"	v
countryscore	main.c	/^int countryscore[6];$/;"	v
cq_return	main.c	/^char cq_return[80] = " \\n";$/;"	v
cqdelay	main.c	/^int cqdelay = 8;$/;"	v
cqmode	main.c	/^int cqmode = CQ;		\/* 1  = CQ  0 = S&P  *\/$/;"	v
cqww	main.c	/^int cqww = 0;$/;"	v
cqwwm2	main.c	/^int cqwwm2 = 0;$/;"	v
cqzone	main.c	/^char cqzone[3] = "";$/;"	v
cr_translation	sockserv.c	/^    int cr_translation;$/;"	m	struct:sockbuffer	file:
ctcomp	main.c	/^int ctcomp = 0;$/;"	v
curattr	splitscreen.c	/^int curattr = 0;$/;"	v
curcol	splitscreen.c	/^int curcol;$/;"	v
curfieldlen	qtcrecv.c	/^int curfieldlen = 0;$/;"	v
curfieldlen	qtcwin.c	/^int curfieldlen = 0;$/;"	v
curpos	qtcrecv.c	/^int curpos = 0;$/;"	v
curpos	qtcwin.c	/^int curpos = 0;$/;"	v
curr_rtty_line	qtcrecv.c	/^int curr_rtty_line = 0;$/;"	v
curr_rtty_line	qtcwin.c	/^int curr_rtty_line = 0;$/;"	v
currow	splitscreen.c	/^int currow;$/;"	v
currrecstate	qtcrecv.c	/^int currrecstate;$/;"	v
currrecstate	qtcwin.c	/^int currrecstate;$/;"	v
currstate	qtcsend.c	/^int currstate;$/;"	v
cw_bandwidth	main.c	/^int cw_bandwidth = 0;$/;"	v
cw_message_length	cw_utils.c	/^unsigned int cw_message_length(char *message)$/;"	f
cw_simulator	background_process.c	/^int cw_simulator(void)$/;"	f
cwcorner	bandmap.c	/^unsigned int cwcorner[NBANDS] =$/;"	v
cwpoints	main.c	/^int cwpoints;$/;"	v
cwstart	main.c	/^int cwstart = 0;			\/**< number characters after which$/;"	v
data_ready	main.c	/^int data_ready = 0;$/;"	v
databases_load	main.c	/^int databases_load()$/;"	f
day	writecabrillo.c	/^    char day;$/;"	m	struct:qso_t	file:
debug_tty	changepars.c	/^int debug_tty(void)$/;"	f
debugflag	main.c	/^int debugflag = 0;$/;"	v
default_lan_service	lancode.c	/^char default_lan_service[16] = "6788";$/;"	v
defer_store	main.c	/^int defer_store = 0;$/;"	v
deinit_controller	rtty.c	/^void deinit_controller()$/;"	f
delete_from_field	qtcrecv.c	/^int delete_from_field(int dir) {$/;"	f
delete_from_field	qtcwin.c	/^int delete_from_field(int dir) {$/;"	f
delete_prev_char	splitscreen.c	/^void delete_prev_char(void)$/;"	f
delete_qso	deleteqso.c	/^void delete_qso(void)$/;"	f
demode	main.c	/^int demode = 0;			\/* 1 =  send DE  before s&p call  *\/$/;"	v
disk_mutex	log_to_disk.c	/^pthread_mutex_t disk_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
display_header	showscore.c	/^void display_header(int *bi)$/;"	f
displayit	displayit.c	/^void displayit(void)$/;"	f
do_record	audio.c	/^void do_record(int message_nr)$/;"	f
drawSmeter	audio.c	/^int drawSmeter(int xpos, int ypos, int yheight, float testvalue)$/;"	f
draw_nb_screen	audio.c	/^int draw_nb_screen(int xpos, int ypos, int yheight, int bar_type)$/;"	f
drawscreen	audio.c	/^int drawscreen(int xpos, int ypos, int yheight, int bar_type)$/;"	f
dupe	main.c	/^int dupe = 0;$/;"	v
dx_arrlsections	main.c	/^int dx_arrlsections = 0;$/;"	v
dx_cont_points	main.c	/^int dx_cont_points = -1;$/;"	v
dxcc	dxcc.c	/^GPtrArray *dxcc;$/;"	v
dxcc_add	dxcc.c	/^void dxcc_add (char * dxcc_line)$/;"	f
dxcc_by_index	dxcc.c	/^dxcc_data *dxcc_by_index(int index)$/;"	f
dxcc_count	dxcc.c	/^int dxcc_count(void)$/;"	f
dxcc_init	dxcc.c	/^void dxcc_init(void)$/;"	f
dxped	main.c	/^int dxped = 0;$/;"	v
e_layer	muf.c	/^static void e_layer()$/;"	f	file:
early_started	main.c	/^int early_started = 0;			\/**< 1 if sending call started early,$/;"	v
edit_last	edit_last.c	/^void edit_last(void)$/;"	f
edit_line	splitscreen.c	/^int edit_line(int c)$/;"	f
editor	main.c	/^int editor = EDITOR_JOE;$/;"	v
emptydir	main.c	/^int emptydir = 0;$/;"	v
entry_text	splitscreen.c	/^char entry_text[BUFFERSIZE];$/;"	v
entwin	main.c	/^WINDOW *sclwin, *entwin;$/;"	v
exc_cont	main.c	/^int exc_cont = 0;$/;"	v
exchange	main.c	/^char exchange[40];$/;"	v
exchange_edit	getexchange.c	/^void exchange_edit (void)$/;"	f
exchange_list	main.c	/^char exchange_list[40] = "";$/;"	v
exchange_serial	main.c	/^int exchange_serial = 0;$/;"	v
exist_in_country_list	score.c	/^int exist_in_country_list()$/;"	f
fdFIFO	main.c	/^int fdFIFO = 0;$/;"	v
fdSertnc	main.c	/^int fdSertnc = 0;$/;"	v
fdcont	rtty.c	/^static int fdcont;		\/\/ global for this file: tty file descriptor$/;"	v	file:
fds_copy	sockserv.c	/^void fds_copy(fd_set *tofd, fd_set *fmfd)$/;"	f
ff	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
fieldset	qtcrecv.c	/^t_qtcfieldset fieldset;$/;"	v
fillto	makelogline.c	/^void fillto(int n) {$/;"	f
firstlog	splitscreen.c	/^char *firstlog(void)$/;"	f
five_banders	focm.c	/^int five_banders;$/;"	v
fixedmult	main.c	/^float fixedmult = 0.0;$/;"	v
foc_init	focm.c	/^void foc_init(void) {$/;"	f
foc_score	focm.c	/^int foc_score(char *call) {$/;"	f
foc_show_cty	focm.c	/^void foc_show_cty() {$/;"	f
foc_show_scoring	focm.c	/^void foc_show_scoring(int start_column) {$/;"	f
foc_total_score	focm.c	/^int foc_total_score() {$/;"	f
focm	main.c	/^int focm = 0;$/;"	v
fp	parse_logcfg.c	/^FILE *fp;$/;"	v
fragment	sockserv.c	/^    int fragment;$/;"	m	struct:sockbuffer	file:
free_cabfmt	writecabrillo.c	/^void free_cabfmt(struct cabrillo_desc *desc) {$/;"	f
free_ie_list	initial_exchange.c	/^void free_ie_list(struct ie_list *head)$/;"	f
free_qso	writecabrillo.c	/^void free_qso(struct qso_t *ptr) {$/;"	f
freq	main.c	/^float freq;$/;"	v
freq	writecabrillo.c	/^    float freq;$/;"	m	struct:qso_t	file:
freq2band	bandmap.c	/^int freq2band(unsigned int freq) {$/;"	f
freq2mode	bandmap.c	/^int freq2mode(int freq, int band) {$/;"	f
freq2nwband	bandmap.c	/^int freq2nwband(unsigned int freq) {$/;"	f
freq_display	freq_display.c	/^int freq_display(void)$/;"	f
g4foc_count	focm.c	/^int g4foc_count; 		\/* how often did we work him *\/$/;"	v
g4foc_index	focm.c	/^int g4foc_index; 		\/* index of Gx4FOC in callarray *\/$/;"	v
gather_input	splitscreen.c	/^void gather_input(char *s)$/;"	f
genqtcline	genqtclist.c	/^int genqtcline(char * qtc, char * line) {$/;"	f
genqtclist	genqtclist.c	/^int genqtclist(char * callsign, int nrofqtc)$/;"	f
getCWdots	cw_utils.c	/^unsigned int getCWdots(char ch)$/;"	f
get_audio_sample	audio.c	/^float get_audio_sample(void)$/;"	f
get_band	addcall.c	/^int get_band(char *logline)$/;"	f
get_next_record	writecabrillo.c	/^struct qso_t *get_next_record (FILE *fp)$/;"	f
get_nr_cntry	focm.c	/^static int get_nr_cntry() {$/;"	f	file:
get_nr_cont	focm.c	/^static int get_nr_cont() {$/;"	f	file:
get_nr_of_mults	showscore.c	/^int get_nr_of_mults()$/;"	f
get_nr_of_points	showscore.c	/^int get_nr_of_points()$/;"	f
get_nth_token	writecabrillo.c	/^gchar *get_nth_token( gchar *str, int n) {$/;"	f
get_qso	edit_last.c	/^void get_qso(int nr, char *buffer)$/;"	f
get_time	get_time.c	/^void get_time(void)$/;"	f
get_total_score	showscore.c	/^int get_total_score() {$/;"	f
get_udp_peer	sockserv.c	/^void get_udp_peer(long *address, int *portnum)$/;"	f
getclusterinfo	clusterinfo.c	/^int getclusterinfo(void)$/;"	f
getctydata	getctydata.c	/^int getctydata(char *checkcallptr)$/;"	f
getctydata2	getctydata.c	/^int getctydata2(char *checkcall)$/;"	f
getctynr	getctydata.c	/^int getctynr(char *checkcall) $/;"	f
getexchange	getexchange.c	/^int getexchange(void)$/;"	f
getgrid	getexchange.c	/^char *getgrid(char *comment)$/;"	f
getidxbybandstr	parse_logcfg.c	/^int getidxbybandstr(char *confband) {$/;"	f
getlastpattern	getexchange.c	/^int getlastpattern(char *checkstring)$/;"	f
getmessages	getmessages.c	/^int getmessages(void)$/;"	f
getpfxindex	getctydata.c	/^int getpfxindex(char *checkcallptr)$/;"	f
getpx	getpx.c	/^void getpx(char *checkcall)$/;"	f
getsummary	getsummary.c	/^int getsummary(FILE *fp)$/;"	f
gettxinfo	gettxinfo.c	/^int gettxinfo(void)$/;"	f
getwwv	getwwv.c	/^int getwwv(void)$/;"	f
grab_next	grabspot.c	/^void grab_next(void)$/;"	f
grabspot	grabspot.c	/^void grabspot(void)$/;"	f
h	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
hamlib_init	main.c	/^void hamlib_init()$/;"	f
headerline	main.c	/^char headerline[81] =$/;"	v
help_rec_msgs	qtcwin.c	/^char help_rec_msgs[6][26] = {$/;"	v
help_send_msgs	qtcwin.c	/^char help_send_msgs[6][26] = {$/;"	v
helpmsg	qtcrecv.c	/^char helpmsg[6][26] = {$/;"	v
highlightCall	printcall.c	/^void highlightCall(unsigned int n) {$/;"	f
highlight_line	edit_last.c	/^static void highlight_line(int row, char *line, int column)$/;"	f	file:
highqsonr	lancode.c	/^int highqsonr;$/;"	v
his_rst	main.c	/^char his_rst[4] = "599";$/;"	v
hiscall	main.c	/^char hiscall[20];			\/**< call of other station *\/$/;"	v
hiscall_sent	main.c	/^char hiscall_sent[20] = "";		\/**< part which was sent during early$/;"	v
hiscall_yfk	searchlog.c	/^static char hiscall_yfk[14] = "            ";$/;"	v	file:
hiscountry	main.c	/^char hiscountry[40];$/;"	v
hostbyname	netkeyer.c	/^struct hostent *hostbyname;$/;"	v	typeref:struct:hostent
hour	writecabrillo.c	/^    int hour;$/;"	m	struct:qso_t	file:
ifds	sockserv.c	/^static int ifds = -1;$/;"	v	file:
ignoredupe	main.c	/^int ignoredupe = 0;$/;"	v
in_country_list	main.c	/^int in_country_list;$/;"	v
in_packetclient	main.c	/^int in_packetclient;$/;"	v
include_note	note.c	/^int include_note(void)$/;"	f
info	writecabrillo.c	/^void info(char *s)$/;"	f
init_audio	audio.c	/^void init_audio()$/;"	f
init_controller	rtty.c	/^int init_controller()$/;"	f
init_mults	addmult.c	/^void init_mults()$/;"	f
init_packet	splitscreen.c	/^int init_packet(void)$/;"	f
init_tlf_rig	sendqrg.c	/^int init_tlf_rig(void)$/;"	f
initialize	sockserv.c	/^static int initialize(void)$/;"	f	file:
initialized	searchlog.c	/^static int initialized = 0;$/;"	v	file:
initialized	sockserv.c	/^static int initialized = 0;$/;"	v	file:
inputbuffer	parse_logcfg.c	/^char inputbuffer[160];$/;"	v
insert_char	calledit.c	/^int insert_char(int curposition)$/;"	f
insmode	splitscreen.c	/^int insmode = TRUE;$/;"	v
interlat	muf.c	/^static void interlat()$/;"	f	file:
inxes	addmult.c	/^int inxes[NBANDS] =$/;"	v
is_comment	writecabrillo.c	/^int is_comment(char *buf) {$/;"	f
isdupe	main.c	/^int isdupe = 0;			\/\/ 0 if nodupe -- for auto qso b4 (LZ3NY)$/;"	v
item_array	writecabrillo.c	/^    GPtrArray *item_array;	\/* array of items in QSO: line$/;"	m	struct:cabrillo_desc	file:
item_count	writecabrillo.c	/^    int item_count;		\/* number items in QSO: line *\/$/;"	m	struct:cabrillo_desc	file:
item_name	writecabrillo.c	/^    char 	*item_name;$/;"	m	struct:tag_conv	file:
itumult	main.c	/^int itumult = 0;		\/* to add the ability of ITU zones to be multiplier *\/$/;"	v
itustr	main.c	/^char itustr[3];$/;"	v
ituzone	main.c	/^char ituzone[3] = "";$/;"	v
ja_cty	main.c	/^int ja_cty;$/;"	v
k	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
k_pin14	main.c	/^int k_pin14;$/;"	v
k_ptt	main.c	/^int k_ptt;$/;"	v
k_tune	main.c	/^int k_tune;$/;"	v
keyer	keyer.c	/^int keyer(void)$/;"	f
keyer_device	main.c	/^char keyer_device[10] = "";	\/\/ ttyS0, ttyS1, lp0-2$/;"	v
keyer_init	main.c	/^void keyer_init()$/;"	f
keyerport	main.c	/^int keyerport = NO_KEYER;$/;"	v
lan_active	lancode.c	/^int lan_active = 0;$/;"	v
lan_bind_rc	lancode.c	/^int lan_bind_rc, lan_close_rc;$/;"	v
lan_close_rc	lancode.c	/^int lan_bind_rc, lan_close_rc;$/;"	v
lan_init	main.c	/^void lan_init()$/;"	f
lan_logline	lancode.c	/^char lan_logline[256];$/;"	v
lan_message	lancode.c	/^char lan_message[256];$/;"	v
lan_mutex	lancode.c	/^int lan_mutex = 0;$/;"	v
lan_recv	lancode.c	/^int lan_recv(void)$/;"	f
lan_recv_close	lancode.c	/^int lan_recv_close(void)$/;"	f
lan_recv_message	lancode.c	/^char lan_recv_message[256];$/;"	v
lan_recv_rc	lancode.c	/^ssize_t lan_recv_rc;$/;"	v
lan_save_file_flags	lancode.c	/^long lan_save_file_flags;$/;"	v
lan_send	lancode.c	/^int lan_send(char *lanbuffer)$/;"	f
lan_send_close	lancode.c	/^int lan_send_close(void)$/;"	f
lan_send_init	lancode.c	/^int lan_send_init(void)$/;"	f
lan_sin	lancode.c	/^struct sockaddr_in lan_sin;$/;"	v	typeref:struct:sockaddr_in
lan_sin_len	lancode.c	/^unsigned int lan_sin_len;$/;"	v
lan_socket_descriptor	lancode.c	/^int lan_socket_descriptor;$/;"	v
lanbuffer	lancode.c	/^char lanbuffer[255];$/;"	v
landebug	lancode.c	/^int landebug = 0;$/;"	v
lanflag	splitscreen.c	/^char lanflag;$/;"	v
lanqsos	lancode.c	/^int lanqsos;$/;"	v
lanrecv_init	lancode.c	/^int lanrecv_init(void) {$/;"	f
lanspotflg	splitscreen.c	/^int lanspotflg = 0;$/;"	v
lantime	lancode.c	/^long lantime;$/;"	v
last10	last10.c	/^int last10(void)$/;"	f
last_rtty_line	qtcrecv.c	/^static char last_rtty_line[2][50] = {"", ""};	\/\/ local copy and store to remain$/;"	v	file:
last_rtty_line	qtcwin.c	/^static char last_rtty_line[2][50] = {"", ""};	\/\/ local copy and store to remain$/;"	v	file:
lastcall	main.c	/^char lastcall[20];$/;"	v
lastlog	splitscreen.c	/^char *lastlog(void)$/;"	f
lastmsg	main.c	/^char lastmsg[1000] = "";$/;"	v
lastqsonr	lancode.c	/^char lastqsonr[5];$/;"	v
lastwwv	main.c	/^char lastwwv[120] = "";$/;"	v
left_arrow	splitscreen.c	/^void left_arrow(void)$/;"	f
len	writecabrillo.c	/^    int len;		\/* max. item length *\/$/;"	m	struct:line_item	file:
line	focm.c	/^    int line;$/;"	m	struct:pos	file:
line_item	writecabrillo.c	/^struct line_item {$/;"	s	file:
linectr	startmsg.c	/^static int linectr; \/\/ global$/;"	v	file:
listmessages	listmessages.c	/^int listmessages(void)$/;"	f
litflag	splitscreen.c	/^int litflag = FALSE;$/;"	v
lm	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
load_callmaster	searchlog.c	/^int load_callmaster(void)$/;"	f
load_multipliers	addmult.c	/^int load_multipliers(void)$/;"	f
loadbandmap	clusterinfo.c	/^int loadbandmap(void)$/;"	f
loc_char_range	locator2longlat.c	/^static const int loc_char_range[] = { 18, 10, 24, 10, 24, 10 };$/;"	v	file:
locator2longlat	locator2longlat.c	/^int locator2longlat(double *longitude, double *latitude, const char *locator) {$/;"	f
log_recv_qtc_to_disk	log_recv_qtc_to_disk.c	/^int log_recv_qtc_to_disk(int qsonr)$/;"	f
log_sent_qtc_to_disk	log_sent_qtc_to_disk.c	/^int log_sent_qtc_to_disk(int qsonr)$/;"	f
log_to_disk	log_to_disk.c	/^int log_to_disk(int from_lan)$/;"	f
logattr	splitscreen.c	/^int logattr(void)$/;"	f
logedit	editlog.c	/^int logedit(void)$/;"	f
logfile	main.c	/^char logfile[120] = "general.log";$/;"	v
logfrequency	main.c	/^int logfrequency = 0;$/;"	v
loghead	main.c	/^struct tln_logline *loghead = NULL;$/;"	v	typeref:struct:tln_logline
login	sockserv.c	/^static void (*login[MAX_SERVED_SOCKETS]) (int i);$/;"	v	file:
logit	logit.c	/^void *logit(void *ptr)$/;"	f
logline	writecabrillo.c	/^    char *logline;$/;"	m	struct:qso_t	file:
logline_edit	main.c	/^char logline_edit[5][LOGLINELEN+1];$/;"	v
logtail	main.c	/^struct tln_logline *logtail = NULL;$/;"	v	typeref:struct:tln_logline
logview	logview.c	/^int logview(void)$/;"	f
lowband_point_mult	main.c	/^int lowband_point_mult = 0;$/;"	v
ls	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
lsock	sockserv.c	/^static int lsock[MAX_SERVED_SOCKETS];$/;"	v	file:
lu_cty	main.c	/^int lu_cty;$/;"	v
m	main.c	/^int m = 1;$/;"	v
main	main.c	/^int main(int argc, char *argv[])$/;"	f
main_ie_list	main.c	/^struct ie_list *main_ie_list;	\/* head of initial exchange list *\/$/;"	v	typeref:struct:ie_list
mainscreen	main.c	/^SCREEN *mainscreen;$/;"	v
make_bar	audio.c	/^int make_bar(int xpos, int ypos, int yheight, unsigned int value,$/;"	f
make_ie_list	initial_exchange.c	/^struct ie_list *make_ie_list(char *file)$/;"	f
makelogline	makelogline.c	/^void makelogline(void)$/;"	f
manise80	main.c	/^int manise80;$/;"	v
markerfile	main.c	/^char markerfile[120] = "";$/;"	v
maxtln_loglines	splitscreen.c	/^int maxtln_loglines = DEFAULTTLN_LOGLINES;$/;"	v
mem	main.c	/^float mem;$/;"	v
message	main.c	/^char message[25][80] =$/;"	v
message_change	messagechange.c	/^int message_change(int x)$/;"	f
mfj1278_control	keyer.c	/^int mfj1278_control(int x)$/;"	f
min	writecabrillo.c	/^    int min;$/;"	m	struct:qso_t	file:
mini_f2	muf.c	/^static void mini_f2()$/;"	f	file:
miniterm	main.c	/^int miniterm = 0;		\/* is miniterm for digimode active? *\/$/;"	v
minute_timer	main.c	/^int minute_timer = 0;$/;"	v
mit_mult_array	main.c	/^char *mit_mult_array;$/;"	v
mit_multiplier_list	main.c	/^char mit_multiplier_list[255][6];$/;"	v
mixedmode	main.c	/^int mixedmode = 0;$/;"	v
mode	main.c	/^char mode[20] = "Log     ";$/;"	v
mode	writecabrillo.c	/^    int mode;$/;"	m	struct:qso_t	file:
modem_mode	main.c	/^char modem_mode[8];$/;"	v
modify_field	qtcrecv.c	/^int modify_field(int pressed) {$/;"	f
modify_field	qtcwin.c	/^int modify_field(int pressed) {$/;"	f
month	writecabrillo.c	/^    char month;$/;"	m	struct:qso_t	file:
move_eol	splitscreen.c	/^void move_eol(void)$/;"	f
muf	muf.c	/^int muf(void)$/;"	f
mult_bands	main.c	/^int mult_bands[MAX_MULTS];$/;"	v
mult_side	main.c	/^int mult_side = 0;$/;"	v
multarray_nr	main.c	/^int multarray_nr = 0;$/;"	v
multi	main.c	/^int multi = 0;			\/* 0 = SO , 1 = MOST, 2 = MM *\/$/;"	v
multiplierinfo	changepars.c	/^int multiplierinfo(void)$/;"	f
multlist	main.c	/^int multlist = 0;$/;"	v
mults	main.c	/^char mults[MAX_MULTS][12];$/;"	v
mults_per_band	main.c	/^int mults_per_band = 1;		\/* mults count per band *\/$/;"	v
mults_possible	main.c	/^GPtrArray *mults_possible;$/;"	v
multscore	main.c	/^int multscore[NBANDS];$/;"	v
multsfile	main.c	/^char multsfile[80] = "";	\/* name of file with a list of allowed$/;"	v
my_cont_points	main.c	/^int my_cont_points = -1;$/;"	v
my_country_points	main.c	/^int my_country_points = -1;$/;"	v
my_rig	main.c	/^RIG *my_rig;			\/* handle to rig (instance) *\/$/;"	v
my_rst	main.c	/^char my_rst[4] = "599";$/;"	v
mycontinent	main.c	/^char mycontinent[3] = "";$/;"	v
mycountrynr	main.c	/^int mycountrynr = 215;$/;"	v
mycqzone	main.c	/^char mycqzone[3] = "";$/;"	v
myperror	sockserv.c	71;"	d	file:
myport	main.c	/^port_t myport;$/;"	v
myqra	main.c	/^char myqra[7] = "";$/;"	v
myrig_model	main.c	/^rig_model_t myrig_model = 351;$/;"	v
name	writecabrillo.c	/^    char *name;			\/* name of the cabrillo format in use *\/$/;"	m	struct:cabrillo_desc	file:
nbscan	audio.c	/^int nbscan(void)$/;"	f
netkeyer	netkeyer.c	/^int netkeyer(int cw_op, char *cwmessage)$/;"	f
netkeyer_close	netkeyer.c	/^int netkeyer_close(void)$/;"	f
netkeyer_hostaddress	netkeyer.c	/^char netkeyer_hostaddress[16] = "127.0.0.1";$/;"	v
netkeyer_init	netkeyer.c	/^int netkeyer_init(void)$/;"	f
netkeyer_port	netkeyer.c	/^int netkeyer_port = 6789;$/;"	v
networkinfo	changepars.c	/^int networkinfo(void)$/;"	f
new_help	show_help.c	34;"	d	file:
newt	main.c	/^static struct termios oldt, newt;$/;"	v	typeref:struct:	file:
next_qtc_qso	main.c	/^int next_qtc_qso;$/;"	v
nextlog	splitscreen.c	/^char *nextlog(void)$/;"	f
nfds	sockserv.c	/^static int nfds = 0;$/;"	v	file:
nicebox	nicebox.c	/^void nicebox(int y, int x, int height, int width, char *boxname)$/;"	f
nlsock	sockserv.c	/^static int nlsock = 0;$/;"	v	file:
no_arrows	main.c	/^int no_arrows = 0;$/;"	v
no_rst	main.c	/^int no_rst = 0;			\/* 1 - do not use RS\/RST *\/$/;"	v
noautocq	main.c	/^int noautocq = 0;$/;"	v
nob4	main.c	/^int nob4 = 0;			\/\/ allow auto b4$/;"	v
node	lancode.c	/^int node;$/;"	v
node_frequencies	lancode.c	/^float node_frequencies[MAXNODES];$/;"	v
nodes	lancode.c	/^int nodes = 0;$/;"	v
noleadingzeros	main.c	/^int noleadingzeros;$/;"	v
nopacket	main.c	/^int nopacket = 0;		\/* set if tlf is called with '-n' *\/$/;"	v
nosocktimeout	sockserv.c	/^void nosocktimeout(void)$/;"	f
nr_bands	searchlog.c	/^int nr_bands;$/;"	v
nr_callmastercalls	main.c	/^long int nr_callmastercalls;$/;"	v
nr_of_bands	focm.c	/^static int nr_of_bands(int x) {$/;"	f	file:
nr_of_px	addpfx.c	/^int nr_of_px = 0;$/;"	v
nr_of_px_ab	addpfx.c	/^int nr_of_px_ab = 0;$/;"	v
nr_of_spots	main.c	/^int nr_of_spots;			\/* Anzahl Lines in spot_ptr array *\/$/;"	v
nr_qsos	main.c	/^int nr_qsos = 0;$/;"	v
nr_qsosflags_for_qtc	main.c	/^int nr_qsosflags_for_qtc;$/;"	v
nr_qtcsent	main.c	/^int nr_qtcsent = 0;$/;"	v
nr_worked	main.c	/^int nr_worked = 0;		\/*< number of calls in worked[] *\/$/;"	v
nrofqtc	qtcrecv.c	/^int nrofqtc = 0;$/;"	v
nrofqtc	qtcwin.c	/^int nrofqtc = 0;$/;"	v
number_fields	qtcrecv.c	/^int number_fields() {$/;"	f
number_fields	qtcwin.c	/^int number_fields() {$/;"	f
oldt	main.c	/^static struct termios oldt, newt;$/;"	v	typeref:struct:termios	file:
one_point	main.c	/^int one_point = 0;$/;"	v
onechar	onechar.c	/^int onechar(void)$/;"	f
openfds	sockserv.c	/^static fd_set readfds, openfds;$/;"	v	file:
other_flg	main.c	/^int other_flg;$/;"	v
outbuffer	splitscreen.c	/^char outbuffer[82];$/;"	v
outfreq	main.c	/^freq_t outfreq;			\/* output  to rig *\/$/;"	v
outfreq	main.c	/^int outfreq;			\/* output  to rig *\/$/;"	v
pacc_pa	paccdx.c	/^int pacc_pa(void)$/;"	f
pacc_pa_flg	main.c	/^int pacc_pa_flg = 0;$/;"	v
pacc_qsos	main.c	/^int pacc_qsos[10][10];$/;"	v
packet	splitscreen.c	/^int packet()$/;"	f
packet_init	main.c	/^void packet_init()$/;"	f
packetinterface	main.c	/^int packetinterface = 0;$/;"	v
packetscreen	main.c	/^SCREEN *packetscreen;$/;"	v
pagedn	splitscreen.c	/^int pagedn(int lines)$/;"	f
pageup	splitscreen.c	/^int pageup(int lines)$/;"	f
panel_mutex	main.c	/^pthread_mutex_t panel_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
panscan	audio.c	/^int panscan(void)$/;"	f
para_word	main.c	/^char para_word[80] = "LODNCFS:3C\\n";	\/* longcw, cluster, search,  DE, contest, filter,  speed,  delay *\/$/;"	v
parse_line_entry	writecabrillo.c	/^struct line_item *parse_line_entry(char *line_entry) {$/;"	f
parse_logcfg	parse_logcfg.c	/^int parse_logcfg(char *inputbuffer)$/;"	f
parse_options	main.c	/^void parse_options(int argc, char *argv[])$/;"	f
parse_qtcline	qtcutil.c	/^int parse_qtcline(char * logline, char callsign[15], int * bandidx) {$/;"	f
partials	main.c	/^int partials = 0;	\/**< show partial calls *\/$/;"	v
peerlen	sockserv.c	/^static unsigned int peerlen = 0;$/;"	v	file:
pfx	addpfx.c	/^    char pfx[6];$/;"	m	struct:__anon1	file:
pfxmult	main.c	/^int pfxmult = 0;$/;"	v
pfxmultab	main.c	/^int pfxmultab = 0;$/;"	v
pfxnummulti	main.c	/^t_pfxnummulti pfxnummulti[MAXPFXNUMMULT];$/;"	v
pfxnummultinr	main.c	/^int pfxnummultinr = 0;$/;"	v
pfxs_per_band	addpfx.c	/^int pfxs_per_band[NBANDS] = {0, 0, 0, 0, 0, 0, 0, 0, 0};$/;"	v
ph_message	main.c	/^char ph_message[14][80] = { "", "", "", "", "", "", "", "", "", "", "", "" };	\/\/ voice keyer file names$/;"	v
pid	main.c	/^pid_t pid;$/;"	v
plain_number	callinput.c	/^int plain_number(char *str) {$/;"	f
play_file	callinput.c	/^int play_file(char *audiofile)$/;"	f
portable_x2	main.c	/^int portable_x2 = 0;$/;"	v
portnum	main.c	/^int portnum = 0;$/;"	v
pos	focm.c	/^struct pos {$/;"	s	file:
pos	qtcrecv.c	/^int pos[6][3] = {{3, 3, 15}, {3, 6, 4}, {8, 8, 2}, {3, 3, 4}, {8, 8, 14}, {24, 24, 4}};$/;"	v
pos	qtcwin.c	/^int pos[6][3] = {{3, 3, 15}, {3, 6, 4}, {8, 8, 2}, {3, 3, 4}, {8, 8, 14}, {24, 24, 4}};$/;"	v
power	muf.c	/^static double power(man, ex)$/;"	f	file:
pr_hostaddress	main.c	/^char pr_hostaddress[48] = "131.155.192.179";$/;"	v
prefix	dxcc.c	/^GPtrArray *prefix;$/;"	v
prefix_add	dxcc.c	/^void prefix_add (char *pfxstr)$/;"	f
prefix_by_index	dxcc.c	/^prefix_data *prefix_by_index(int index)$/;"	f
prefix_count	dxcc.c	/^int prefix_count(void)$/;"	f
prefix_init	dxcc.c	/^void prefix_init(void)$/;"	f
prefixes_worked	addpfx.c	/^char prefixes_worked[MAX_CALLS][6];$/;"	v
prefixes_worked_ab	addpfx.c	/^} prefixes_worked_ab[MAX_CALLS];$/;"	v	typeref:struct:__anon1
prepare_fixed_part	makelogline.c	/^void prepare_fixed_part(void) {$/;"	f
prepare_line	writecabrillo.c	/^void prepare_line( struct qso_t *qso, struct cabrillo_desc *desc, char *buf ) {$/;"	f
prepare_specific_part	makelogline.c	/^void prepare_specific_part(void) {$/;"	f
prev_qso	prevqso.c	/^ 	int prev_qso(void){$/;"	f
prevlog	splitscreen.c	/^char *prevlog(void)$/;"	f
prevqtccall	qtcrecv.c	/^static char prevqtccall[15] = "";$/;"	v	file:
prevqtccall	qtcwin.c	/^static char prevqtccall[15] = "";$/;"	v	file:
print_big_number	freq_display.c	/^int print_big_number(int number, int y_position, int x_position,$/;"	f
print_dot	freq_display.c	/^int print_dot(int y, int x)$/;"	f
print_space	freq_display.c	/^int print_space(int y, int x)$/;"	f
printcall	printcall.c	/^void printcall(void)$/;"	f
printfield	showscore.c	/^void printfield (int y, int x, int number)$/;"	f
prsock	main.c	/^int prsock = 0;$/;"	v
put_qtc	qtcrecv.c	/^int put_qtc() {$/;"	f
put_qtc	qtcwin.c	/^int put_qtc() {$/;"	f
putback_qso	edit_last.c	/^void putback_qso (int nr, char *buffer)$/;"	f
pxstr	main.c	/^char pxstr[11] = "";$/;"	v
py_cty	main.c	/^int py_cty;$/;"	v
q	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
qrb	qrb.c	/^int qrb(double lon1, double lat1, double lon2, double lat2, double *distance, double *azimuth) {$/;"	f
qrb_	qrb.c	/^int qrb_(double *range, double *bearing) {$/;"	f
qso_nr	writecabrillo.c	/^    int qso_nr;$/;"	m	struct:qso_t	file:
qso_once	main.c	/^int qso_once = 0;$/;"	v
qso_t	writecabrillo.c	/^struct qso_t {$/;"	s	file:
qsoflags_for_qtc	main.c	/^int qsoflags_for_qtc[MAX_QSOS];$/;"	v
qsonr_to_str	qsonr_to_str.c	/^int qsonr_to_str(void)$/;"	f
qsonrstr	main.c	/^char qsonrstr[5] = "0001";$/;"	v
qsonum	main.c	/^int qsonum = 1;			\/* nr of next QSO *\/$/;"	v
qsos	main.c	/^char qsos[MAX_QSOS][LOGLINELEN+1];$/;"	v
qtc_format	bandmap.c	/^int qtc_format(spot* entry, char * call, int band) {$/;"	f
qtc_get	qtcutil.c	/^int qtc_get(char callsign[15], int band) {$/;"	f
qtc_inc	qtcutil.c	/^int qtc_inc(char callsign[15], int band) {$/;"	f
qtc_main_panel	qtcwin.c	/^int qtc_main_panel(int direction) {$/;"	f
qtc_panel	qtcwin.c	/^PANEL * qtc_panel;$/;"	v
qtc_recv_msgs	main.c	/^char qtc_recv_msgs[12][80] = {"QTC?", "QRV", "R", "", "TIME?", "CALL?", "NR?", "AGN", "", "QSL ALL", "", ""}; \/\/ QTC receive windowS Fx messages$/;"	v
qtc_recv_panel	qtcrecv.c	/^int qtc_recv_panel() {$/;"	f
qtc_send_msgs	main.c	/^char qtc_send_msgs[12][80] = {"QRV?", "QTC", "", "", "TIME", "CALL", "NR", "", "", "", "", ""}; \/\/ QTC send window Fx messages$/;"	v
qtc_send_panel	qtcsend.c	/^int qtc_send_panel() {$/;"	f
qtc_store	main.c	/^GHashTable* qtc_store = NULL;$/;"	v
qtccallsign	qtcwin.c	/^char * qtccallsign;$/;"	v
qtccount	qtcwin.c	/^int * qtccount;$/;"	v
qtccurrdiretion	qtcwin.c	/^int * qtccurrdiretion;$/;"	v
qtcdirection	main.c	/^int qtcdirection = 0;$/;"	v
qtclist	main.c	/^t_qtclist qtclist;$/;"	v
qtcpanel	qtcsend.c	/^int qtcpanel = 0;$/;"	v
qtcpanel	qtcwin.c	/^int qtcpanel = 0;$/;"	v
qtcreccalls	main.c	/^char qtcreccalls[MAX_CALLS][15];$/;"	v
qtcreclist	main.c	/^t_qtcreclist qtcreclist;$/;"	v
qtcrecv_panel	qtcrecv.c	/^PANEL * qtcrecv_panel;$/;"	v
qtcrecvpanel	qtcrecv.c	/^int qtcrecvpanel = 0;$/;"	v
qtcrecvwin	qtcrecv.c	/^WINDOW * qtcrecvwin;$/;"	v
qtcsend_panel	qtcsend.c	/^PANEL * qtcsend_panel;$/;"	v
qtcsendwin	qtcsend.c	/^WINDOW * qtcsendwin;$/;"	v
qtcwin	qtcwin.c	/^WINDOW * qtcwin;$/;"	v
r	main.c	/^double r = 50;$/;"	v
read_cabrillo_format	writecabrillo.c	/^struct cabrillo_desc *read_cabrillo_format (char *filename, char *format) $/;"	f
read_logcfg	parse_logcfg.c	/^int read_logcfg(void)$/;"	f
read_rules	rules.c	/^int read_rules()$/;"	f
readcalls	readcalls.c	/^int readcalls(void)$/;"	f
readctydata	readctydata.c	/^int readctydata(void)$/;"	f
readfds	sockserv.c	/^static fd_set readfds, openfds;$/;"	v	file:
readqtccalls	readqtccalls.c	/^int readqtccalls()$/;"	f
readqtcfromfile	qtcrecv.c	/^int readqtcfromfile() {$/;"	f
readqtcfromfile	qtcwin.c	/^int readqtcfromfile() {$/;"	f
recall_exchange	recall_exchange.c	/^int recall_exchange(void)$/;"	f
recall_mult	main.c	/^int recall_mult = 0;$/;"	v
receive_packet	splitscreen.c	/^int receive_packet(void)$/;"	f
record	audio.c	/^void record(void)$/;"	f
recordmenue	audio.c	/^void recordmenue(void)$/;"	f
recv_error	lancode.c	/^int recv_error;$/;"	v
recv_packets	lancode.c	/^int recv_packets;$/;"	v
recvline	sockserv.c	/^int recvline(int *fd, char *buf, int buflen)$/;"	f
refresh_comment	logit.c	/^void refresh_comment(void) {$/;"	f
refreshp	main.c	/^void refreshp() {$/;"	f
remember_multi	addmult.c	/^int remember_multi(char *multiplier, int band, int show_new_band)$/;"	f
repair_log	checklogfile.c	/^int repair_log(char *filename) {$/;"	f
rescale	audio.c	/^int rescale(int testvalue)$/;"	f
resolve	sockserv.c	/^long resolve(char *hostname)$/;"	f
resolveService	lancode.c	/^int resolveService(const char * service) {$/;"	f
result	searchlog.c	/^static char result[MAX_CALLS][82];$/;"	v	file:
resume_editing	splitscreen.c	/^void resume_editing(void)$/;"	f
rig_comm_error	main.c	/^int rig_comm_error = 0;$/;"	v
rig_comm_success	main.c	/^int rig_comm_success = 0;$/;"	v
rigconf	main.c	/^char rigconf[80];$/;"	v
right_arrow	splitscreen.c	/^void right_arrow(void)$/;"	f
rignumber	main.c	/^int rignumber = 0;$/;"	v
rigportname	main.c	/^char rigportname[40];$/;"	v
rit	main.c	/^int rit;$/;"	v
rmode	main.c	/^rmode_t rmode;			\/* radio mode of operation *\/$/;"	v
rst_r	writecabrillo.c	/^    int rst_r;$/;"	m	struct:qso_t	file:
rst_s	writecabrillo.c	/^    int rst_s;$/;"	m	struct:qso_t	file:
rttyoutput	main.c	/^char rttyoutput[120];$/;"	v
rx_rtty	rtty.c	/^int rx_rtty()$/;"	f
ry_addchar	rtty.c	/^void ry_addchar(char c)$/;"	f
ry_term	rtty.c	/^static char ry_term[5][50] = { "", "", "", "", "" };$/;"	v	file:
sanitize	splitscreen.c	/^void sanitize(char *s)$/;"	f
sc_device	main.c	/^char sc_device[40] = "\/dev\/dsp";$/;"	v
sc_sidetone	main.c	/^int sc_sidetone;$/;"	v
sc_volume	main.c	/^char sc_volume[4] = "";$/;"	v
scale_values	main.c	/^int scale_values[20] =$/;"	v
scanmenu	audio.c	/^void scanmenu(void)$/;"	f
sclwin	main.c	/^WINDOW *sclwin, *entwin;$/;"	v
score	score.c	/^int score()$/;"	f
score2	score.c	/^int score2(char *line)$/;"	f
scroll_down	qtcsend.c	/^int scroll_down(int i) {$/;"	f
scroll_log	scroll_log.c	/^void scroll_log(void)$/;"	f
search_g4foc_in_callarray	focm.c	/^static int search_g4foc_in_callarray(void) {$/;"	f	file:
search_panel	searchlog.c	/^PANEL *search_panel;$/;"	v
search_win	searchlog.c	/^WINDOW *search_win;$/;"	v
searchcallarray	searchcallarray.c	/^int searchcallarray(char *hiscall)$/;"	f
searchflg	main.c	/^int searchflg = 0;		\/* 1  = display search  window *\/$/;"	v
searchlog	searchlog.c	/^void searchlog(char *searchstring)$/;"	f
searchresult	searchlog.c	/^static char searchresult[MAX_CALLS][82];$/;"	v	file:
secs	main.c	/^int secs = 0;$/;"	v
section	getexchange.c	/^char section[8] = "";$/;"	v
sectn_mult	main.c	/^int sectn_mult = 0;$/;"	v
selecttimeval	sockserv.c	/^static struct timeval *selecttimeval = NULL;$/;"	v	typeref:struct:timeval	file:
send_bandswitch	callinput.c	/^void send_bandswitch(int freq)$/;"	f
send_cluster	splitscreen.c	/^int send_cluster(void)$/;"	f
send_error	lancode.c	/^int send_error[MAXNODES];$/;"	v
send_error_limit	lancode.c	/^int send_error_limit[MAXNODES];$/;"	v
send_freq	lancode.c	/^int send_freq(float freq)$/;"	f
send_lan_message	lancode.c	/^int send_lan_message(int opcode, char *message)$/;"	f
send_packets	lancode.c	/^int send_packets[MAXNODES];$/;"	v
send_time	lancode.c	/^int send_time(void)$/;"	f
sendbuf	sendbuf.c	/^void sendbuf(void)$/;"	f
sendbuffer	lancode.c	/^char sendbuffer[256];$/;"	v
sending_call	main.c	/^int sending_call = 0;$/;"	v
sendmessage	sendbuf.c	/^void sendmessage(char *msg)$/;"	f
sendqrg	sendqrg.c	/^int sendqrg(void)$/;"	f
sendspcall	sendspcall.c	/^void sendspcall(void){$/;"	f
sentqtc_p	qtcsend.c	/^int sentqtc_p;$/;"	v
sentqtc_p	qtcwin.c	/^int sentqtc_p;$/;"	v
sentqtc_queue	qtcsend.c	/^char sentqtc_queue[11][30];$/;"	v
sentqtc_queue	qtcwin.c	/^char sentqtc_queue[11][30];$/;"	v
serial_grid4_mult	main.c	/^int serial_grid4_mult = 0;$/;"	v
serial_or_section	main.c	/^int serial_or_section = 0;	\/* exchange is serial OR section, like HA-DX *\/$/;"	v
serial_rate	main.c	/^int serial_rate = 2400;$/;"	v
serial_section_mult	main.c	/^int serial_section_mult = 0;$/;"	v
set_tone	set_tone.c	/^int set_tone(void)$/;"	f
set_udp_peer	sockserv.c	/^void set_udp_peer(long address, int portnum)$/;"	f
setcontest	setcontest.c	/^int setcontest(void)$/;"	f
setlinemode	sockserv.c	/^void setlinemode(int s, int tf)$/;"	f
setparameters	setparameters.c	/^int setparameters(void)$/;"	f
setweight	speedup.c	/^int setweight(int weight)$/;"	f
shift_left	qtcrecv.c	/^int shift_left(char * fieldval, int shift) {$/;"	f
shift_left	qtcwin.c	/^int shift_left(char * fieldval, int shift) {$/;"	f
shift_right	qtcrecv.c	/^int shift_right(char * fieldval) {$/;"	f
shift_right	qtcwin.c	/^int shift_right(char * fieldval) {$/;"	f
shortqsonr	main.c	/^int shortqsonr = LONGCW;	\/* 1  =  short  cw char in exchange *\/$/;"	v
show_freq	time_update.c	/^void show_freq(void)$/;"	f
show_help	show_help.c	/^int show_help(void) {$/;"	f
show_help	show_help.c	/^show_help(void)$/;"	f
show_help_msg	qtcrecv.c	/^int show_help_msg(msgidx) {$/;"	f
show_help_msg	qtcwin.c	/^int show_help_msg(msgidx) {$/;"	f
show_it	focm.c	/^static gboolean show_it(gpointer key, gpointer val, gpointer data) {$/;"	f	file:
show_mults	showpxmap.c	/^int show_mults(void)$/;"	f
show_needed_sections	searchlog.c	/^void show_needed_sections(void)$/;"	f
show_rtty	rtty.c	/^int show_rtty(void)$/;"	f
show_sendto_lines	qtcwin.c	/^int show_sendto_lines() {$/;"	f
show_status	qtcrecv.c	/^int show_status(int idx) {$/;"	f
show_status	qtcwin.c	/^int show_status(int idx) {$/;"	f
show_summary	showscore.c	/^void show_summary( int points, int multi )$/;"	f
show_time	main.c	/^int show_time = 0;$/;"	v
show_zones	showzones.c	/^int show_zones(int bandinx)$/;"	f
showfield	qtcrecv.c	/^int showfield(int fidx) {$/;"	f
showfield	qtcwin.c	/^int showfield(int fidx) {$/;"	f
showfreq	main.c	/^int showfreq = 0;$/;"	v
showinfo	showinfo.c	/^int showinfo(int x)$/;"	f
showmsg	startmsg.c	/^void showmsg(char *message) {$/;"	f
shownewmult	main.c	/^int shownewmult = -1;$/;"	v
shownr	startmsg.c	/^void shownr(char *message, int nr) {$/;"	f
showscore	showscore.c	/^int showscore(void)$/;"	f
showscore_flag	main.c	/^int showscore_flag = 0;		\/* show  score window *\/$/;"	v
showstring	startmsg.c	/^void showstring(char *message1, char *message2) {$/;"	f
simulator	main.c	/^int simulator = 0;$/;"	v
simulator_mode	main.c	/^int simulator_mode = 0;$/;"	v
simulator_seed	main.c	/^int simulator_seed = 8327;$/;"	v
simulator_tone	main.c	/^char simulator_tone[5];$/;"	v
six_banders	focm.c	/^int six_banders;$/;"	v
sockbuf	sockserv.c	/^} sockbuf[FD_SETSIZE];$/;"	v	typeref:struct:sockbuffer
sockbuffer	sockserv.c	/^struct sockbuffer {$/;"	s	file:
socket_descriptor	netkeyer.c	/^int socket_descriptor;$/;"	v
sockserv_error	sockserv.c	/^char sockserv_error[80];$/;"	v
socktimeout	sockserv.c	/^void socktimeout(int msec)$/;"	f
socktimeval	sockserv.c	/^static struct timeval *socktimeval = NULL;$/;"	v	typeref:struct:timeval	file:
sp_return	main.c	/^char sp_return[80] = " \\n";$/;"	v
speed	cw_utils.c	/^int speed = 10;$/;"	v
speed_conversion	cw_utils.c	/^int speed_conversion(int cwspeed)$/;"	f
speeddown	speeddown.c	/^int speeddown(void)$/;"	f
speedstr	cw_utils.c	/^char speedstr[50] = CW_SPEEDS;$/;"	v
speedup	speedup.c	/^int speedup(void)$/;"	f
spot_ptr	main.c	/^char spot_ptr[MAX_SPOTS][82];		\/* Array of cluster spot lines *\/$/;"	v
spot_ptr_mutex	splitscreen.c	/^pthread_mutex_t spot_ptr_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
spotarray	clusterinfo.c	/^int spotarray[MAX_SPOTS];		\/* Array of indices into spot_ptr *\/$/;"	v
spots	bandmap.c	/^GPtrArray *spots;$/;"	v
sprint	main.c	/^int sprint = 0;$/;"	v
ssb_bandwidth	main.c	/^int ssb_bandwidth = 3000;$/;"	v
ssbcorner	bandmap.c	/^unsigned int ssbcorner[NBANDS] =$/;"	v
ssbpoints	main.c	/^int ssbpoints;$/;"	v
ssexchange	getexchange.c	/^char ssexchange[30] = "";$/;"	v
start_editing	splitscreen.c	/^void start_editing(void)$/;"	f
startcli	sockserv.c	/^int startcli(void)$/;"	f
startcliaddr	sockserv.c	/^int startcliaddr(int family, unsigned long int addr, unsigned short int portnum)$/;"	f
startup	sockserv.c	/^int startup(int portnum, void (*newin) (int))$/;"	f
startup_udp	sockserv.c	/^int startup_udp(int portnum)$/;"	f
stewperry_flg	main.c	/^int stewperry_flg = 0;$/;"	v
stewperry_show_summary	showscore.c	/^void stewperry_show_summary( int points, float fixedmult )$/;"	f
stop_backgrnd_process	main.c	/^int stop_backgrnd_process = 1;	\/* dont start until we know what we are doing *\/$/;"	v
stoptx	stoptx.c	/^int stoptx(void)$/;"	f
store_qso	store_qso.c	/^int store_qso(char *loglineptr)$/;"	f
store_recv_qtc	log_recv_qtc_to_disk.c	/^int store_recv_qtc(char *loglineptr)$/;"	f
store_sent_qtc	log_sent_qtc_to_disk.c	/^int store_sent_qtc(char *loglineptr)$/;"	f
strip_spaces	qtcsend.c	/^int strip_spaces(char * src, char * tempc) {$/;"	f
strip_spaces	qtcwin.c	/^int strip_spaces(char * src, char * tempc) {$/;"	f
sunup	sunup.c	/^void sunup(double DEST_Lat, double *sunrise, double *sundown)$/;"	f
synclog	readcalls.c	/^int synclog(char *synclogfile)$/;"	f
synclogfile	main.c	/^char synclogfile[120];$/;"	v
system_secs	main.c	/^int system_secs;$/;"	v
t	muf.c	/^int t = 21;$/;"	v
t_qtc_bands	qtcutil.c	/^typedef unsigned char t_qtc_bands[NBANDS];$/;"	t	file:
tag	writecabrillo.c	/^    enum tag_t  tag;$/;"	m	struct:tag_conv	typeref:enum:tag_conv::tag_t	file:
tag	writecabrillo.c	/^    enum tag_t tag;	\/* item type *\/$/;"	m	struct:line_item	typeref:enum:line_item::tag_t	file:
tag_conv	writecabrillo.c	/^struct tag_conv {$/;"	s	file:
tag_t	writecabrillo.c	/^enum tag_t { NO_ITEM, FREQ, MODE, DATE, TIME, MYCALL, HISCALL, RST_S, RST_R, $/;"	g	file:
tag_tbl	writecabrillo.c	/^} tag_tbl[] = {$/;"	v	typeref:struct:tag_conv
talk	lancode.c	/^int talk(void)$/;"	f
talkarray	lancode.c	/^char talkarray[5][62];$/;"	v
termbuf	main.c	/^char termbuf[88] = "";$/;"	v
termbufcount	main.c	/^int termbufcount = 0;$/;"	v
terminal1	main.c	/^char terminal1[88] = "";$/;"	v
terminal2	main.c	/^char terminal2[88] = "";$/;"	v
terminal3	main.c	/^char terminal3[88] = "";$/;"	v
terminal4	main.c	/^char terminal4[88] = "";$/;"	v
test_ie_list	initial_exchange.c	/^int test_ie_list(struct ie_list *example_ie_list)$/;"	f
testaudio	audio.c	/^int testaudio()$/;"	f
testcall_yfk	searchlog.c	/^static char testcall_yfk[14] = "";$/;"	v	file:
this_second	main.c	/^int this_second;$/;"	v
thisnode	lancode.c	/^char thisnode = 'A'; 		\/*  start with 'A' if not defined in$/;"	v
three_point	main.c	/^int three_point = 0;$/;"	v
time_master	lancode.c	/^int time_master;$/;"	v
time_ptr	main.c	/^struct tm *time_ptr;$/;"	v	typeref:struct:tm
time_update	time_update.c	/^void time_update(void)$/;"	f
timecorr	lancode.c	/^long timecorr;$/;"	v
timeoffset	main.c	/^int timeoffset = 0;$/;"	v
tlf_cleanup	main.c	/^void tlf_cleanup()$/;"	f
tlfcolors	main.c	/^int tlfcolors[8][2] = { {COLOR_BLACK, COLOR_WHITE},$/;"	v
tln_input_buffer	splitscreen.c	/^char tln_input_buffer[2 * BUFFERSIZE];$/;"	v
tln_loglines	splitscreen.c	/^int tln_loglines = 0;$/;"	v
tnc_serial_rate	main.c	/^int tnc_serial_rate = 2400;$/;"	v
tncport	main.c	/^int tncport = 1;$/;"	v
tncportname	main.c	/^char tncportname[40];$/;"	v
to_mode	writecabrillo.c	/^char *to_mode[] = {$/;"	v
tonecpy	main.c	/^char tonecpy[5];$/;"	v
tonestr	main.c	/^char tonestr[5] = "600";$/;"	v
total	main.c	/^int total = 0; 		\/**< total number of qso points *\/$/;"	v
totalcountries	main.c	/^int totalcountries = 0;$/;"	v
totalmults	main.c	/^int totalmults = 0;$/;"	v
totalzones	main.c	/^int totalzones = 0;$/;"	v
tprintf	sockserv.c	/^int tprintf(char *fmt,...)$/;"	f
tputc	sockserv.c	/^int tputc(char c)$/;"	f
tputstr	sockserv.c	/^int tputstr(char *buf)$/;"	f
translate_item_name	writecabrillo.c	/^enum tag_t translate_item_name( char *name ) {$/;"	f
trx_control	main.c	/^int trx_control = 0;$/;"	v
trxmode	main.c	/^int trxmode = CWMODE;$/;"	v
tune_val	main.c	/^int tune_val = 0;$/;"	v
two_point	main.c	/^int two_point = 0;$/;"	v
tx	writecabrillo.c	/^    int tx;$/;"	m	struct:qso_t	file:
txdelay	main.c	/^int txdelay = 0;$/;"	v
u	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
ua9_cty	main.c	/^int ua9_cty;$/;"	v
udp_peer	sockserv.c	/^static struct sockaddr_in udp_peer;$/;"	v	typeref:struct:sockaddr_in	file:
udp_socket	sockserv.c	/^int udp_socket = -1;$/;"	v
udpport	sockserv.c	/^static int udpport = 0;$/;"	v	file:
ui_color_init	main.c	/^void ui_color_init()$/;"	f
ui_init	main.c	/^void ui_init()$/;"	f
unhighlight_line	edit_last.c	/^static void unhighlight_line(int row, char *line)$/;"	f	file:
universal	main.c	/^int universal = 0;$/;"	v
update_line	time_update.c	/^void update_line(char *timestr)$/;"	f
use_bandoutput	main.c	/^int use_bandoutput = 0;$/;"	v
use_part	main.c	/^int use_part = 0;	\/**< if 1 use automatically found partial call *\/$/;"	v
use_rxvt	main.c	/^int use_rxvt = 0;$/;"	v
use_vk	main.c	/^int use_vk = 0;$/;"	v
use_xterm	main.c	/^int use_xterm = 0;$/;"	v
usprintf	sockserv.c	/^int usprintf(int s, char *fmt,...)$/;"	f
usputb	sockserv.c	/^int usputb(int s, char *buf, int buflen)$/;"	f
usputs	sockserv.c	/^int usputs(int s, char *buf)$/;"	f
usvprintf	sockserv.c	/^int usvprintf(int s, char *fmt, va_list args)$/;"	f
ve_cty	main.c	/^int ve_cty;$/;"	v
verbose	main.c	/^int verbose = 0;$/;"	v
vfo	main.c	/^vfo_t vfo;			\/* vfo selection *\/$/;"	v
view_state	splitscreen.c	/^int view_state = STATE_EDITING;$/;"	v
viewbottom	splitscreen.c	/^void viewbottom(void)$/;"	f
viewing	main.c	/^struct tln_logline *viewing = NULL;$/;"	v	typeref:struct:tln_logline
viewlog	splitscreen.c	/^void viewlog(void)$/;"	f
viewtop	splitscreen.c	/^void viewtop(void)$/;"	f
vk_cty	main.c	/^int vk_cty;$/;"	v
w_cty	main.c	/^int w_cty;$/;"	v
walkdn	splitscreen.c	/^int walkdn(void)$/;"	f
walkup	splitscreen.c	/^int walkup(void)$/;"	f
wazmult	main.c	/^int wazmult = 0;		\/* to add the ability of WAZ zones to be multiplier *\/$/;"	v
weight	main.c	/^int weight = 0;$/;"	v
weightbuf	main.c	/^char weightbuf[4];$/;"	v
whichcontest	main.c	/^char whichcontest[40] = "qso";$/;"	v
whole_lines	sockserv.c	/^    int whole_lines;$/;"	m	struct:sockbuffer	file:
width	main.c	/^pbwidth_t width;$/;"	v
wkeyerbuffer	main.c	/^char wkeyerbuffer[400];$/;"	v
wnicebox	nicebox.c	/^void wnicebox(WINDOW *win, int y, int x, int height, int width, char *boxname)$/;"	f
worked	main.c	/^struct worked_t worked[MAX_CALLS]; \/*< worked stations *\/$/;"	v	typeref:struct:worked_t
wpx	main.c	/^int wpx = 0;$/;"	v
write_adif	writecabrillo.c	/^int write_adif(void)$/;"	f
write_cabrillo	writecabrillo.c	/^int write_cabrillo(void)$/;"	f
write_keyer	write_keyer.c	/^int write_keyer(void)$/;"	f
write_tone	set_tone.c	/^void write_tone(void)$/;"	f
writeparas	writeparas.c	/^int writeparas(void)$/;"	f
wysiwyg_multi	main.c	/^int wysiwyg_multi = 0;$/;"	v
wysiwyg_once	main.c	/^int wysiwyg_once = 0;$/;"	v
x	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
xmax	main.c	/^int ymax, xmax;			\/* screen size *\/$/;"	v
xn	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
xplanet	main.c	/^int xplanet = 0;$/;"	v
xr	muf.c	/^double xr;$/;"	v
xs	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
xt	muf.c	/^double xt;$/;"	v
year	writecabrillo.c	/^    int year;$/;"	m	struct:qso_t	file:
ymax	main.c	/^int ymax, xmax;			\/* screen size *\/$/;"	v
yn_	muf.c	/^double xn, xs, ls, h, ff, x, yn_, q, k, lm, u, a;$/;"	v
yr	muf.c	/^double yr;$/;"	v
yt	muf.c	/^double yt;$/;"	v
zl_cty	main.c	/^int zl_cty;$/;"	v
zone_export	getexchange.c	/^char zone_export[3] = "  ";$/;"	v
zone_fix	getexchange.c	/^char zone_fix[3] = "";$/;"	v
zone_nr	zone_nr.c	/^int zone_nr(char *comment)$/;"	f
zonedisplay	main.c	/^int zonedisplay = 0;$/;"	v
zones	main.c	/^int zones[41];			\/* same for cqzones; using 1 - 40 *\/$/;"	v
zonescore	main.c	/^int zonescore[6];$/;"	v
zs_cty	main.c	/^int zs_cty;$/;"	v
